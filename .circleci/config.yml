version: 2
jobs:
  build:
    docker:
      - image: circleci/node:8.10

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Install dependencies
          command: |
            npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
  e2e_test:
    docker:
      - image: circleci/node:8.10
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: v1-dependencies-{{ checksum "package.json" }}
      # run tests!
      - run:
          name: "Install jq"
          command: "sudo apt-get install jq"
      - run:
          name: Run tests with coverage
          # shell: /bin/sh
          command: |
            # set -x
            if [ "${CIRCLE_BRANCH}" == "dev" ];
            then
              echo '$DEV_API'
              # echo 'export TESTING_API=${DEV_API}' >> ~/.bashrc
              # cat ~/.bashrc
              # bash ./e2e-test.sh
            elif [ "${CIRCLE_BRANCH}" == "master" ];
            then
              echo '$PROD_API'
              # echo 'export TESTING_API=${PROD_API}' >> ~/.bashrc
              # cat ~/.bashrc
              # bash ./e2e-test.sh
            fi
      # - run:
      #     name: "Run script"
      #     command: |
      #       bash ./e2e-test.sh

  # test:
  #   docker:
  #     - image: circleci/node:8.10
  #   steps:
  #     - restore_cache:
  #         key: v1-dependencies-{{ checksum "package.json" }}
  #     - checkout
  #     # run tests!
  #     - run:
  #         name: Run tests with coverage
  #         command: |
  #           npm install
  #           npm run test --coverage
  deploy:
    docker:
      - image: circleci/node:8.10
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: "Install awscli"
          command: "sudo apt-get -y -qq install awscli"
      - run:
          name: "Build"
          command: "npm run build"

      - run:
          name: Deploy
          # command: sls deploy --stage pre
          command: |
            if [ "${CIRCLE_BRANCH}" == "dev" ];
            then
              npm run deploy-staging
              
            elif [ "${CIRCLE_BRANCH}" == "master" ];
            then
              npm run deploy-prod
            fi
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - e2e_test:
          requires:
            - build
          filters:
            branches:
              only:
                - dev
                - master
      - deploy:
          requires:
            - e2e_test
          filters:
            branches:
              only:
                - dev
                - master
